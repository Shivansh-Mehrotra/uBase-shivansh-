"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys
from datetime import timedelta

import environ
env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# PROJECT_PATH = os.path.abspath(os.path.dirname(__file__))
# sys.path.insert(0, os.path.dirname(PROJECT_PATH))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/`

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY", "46j9(h6bjd'vd7v'8sd7sdvwg53y7574/fwege6Pfrge465645vt45v4")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', True)

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'admin_tools',
    'admin_tools.theming',
    'admin_tools.menu',
    'admin_tools.dashboard',


    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

]

THIRD_PARTY = [
    'rest_framework',
    'django_extensions',
    'django_filters',
    'corsheaders',
]

UBASE_CORE = [
    'core.apps.auth_user',
    'core.apps.permission',
    'core.apps.role',
    'core.apps.locality',
    'core.apps.notification',
    'core.apps.lookup_management',
]

CUSTOM_APP = [
    'apps.sample',
    'apps.user',
    'apps.student',
]

INSTALLED_APPS += THIRD_PARTY + UBASE_CORE + CUSTOM_APP

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # make responce handlre -> add header for maintain api/permission version
    #shivansh
    'apps.student.middleware.StudentAppMiddleware',
    'apps.student.middleware.RequestResponseLoggingMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': False,
        'OPTIONS': {
            'debug': DEBUG,
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
                'admin_tools.template_loaders.Loader',
            ],
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': env.db()
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
# collect stat files outside .git repo
# server these files using http server (nginx)
PARENT_BASE_DIR = os.path.dirname(BASE_DIR)
STATIC_ROOT = os.path.join(PARENT_BASE_DIR, 'static')

# root/static folder contains custom static files
# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'static'),
# )


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'token',
    'app-source',
    'app_source'
]


AUTH_USER_MODEL = "user.User"

AUTHENTICATION_BACKENDS = (
    # replace this with your `Backend(ModelBackend)` class if you want to override `authenticate()`
    'core.auth.backends.EmailAuthenticationBackend',

    'core.auth.backends.CorePermissionBackend',
)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # TODO: handle app source in every REST request
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'EXCEPTION_HANDLER': 'core.handlers.exception.custom_exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'core.pagination.BasePagination',
    'DEFAULT_FILTER_BACKENDS': [
        'core.filters.FilterBackend',
        'core.filters.OrderingFilter',
        'rest_framework.filters.SearchFilter',
    ],
    'SEARCH_PARAM': '_q',
    'ORDERING_PARAM': '_sort'
}


"""

if SHOW_ERROR_IN_MESSAGE is
"""
SHOW_ERROR_IN_MESSAGE = True
DEFAULT_MESSAGE_KEY = "message"
DEFAULT_SUCCESS_MESSAGE = "Success"
DEFAULT_ERROR_MESSAGE = "Error Processing Request"

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# website base url
WEBSITE_BASE_PATH = "http://localhost:8000/any/base/path"

# password reset user that user can click to land on reset password screen
PASSWORD_RESET_URL = WEBSITE_BASE_PATH + "/auth/path"

#Use this setting to set default logo from various mails
BRANDING_LOGO = "https://media.umbrellainfocare.com/wp-content/uploads/2018/06/logo.png"

#TODO: to be used in user event model
DEFAULT_USER_EVENT_LIFETIME = 60 * 60  # seconds

# SMTP settings
DEFAULT_FROM_EMAIL = 'admin@admin.com'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_CONFIG = env.email_url('EMAIL_URL', default='smtp://user:password@localhost:25')
vars().update(EMAIL_CONFIG)

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST_USER = 'deveshg@umbrellainfocare.com'
# EMAIL_HOST_PASSWORD = 'nblhgrycdxjxcnsz'
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
# EMAIL_PORT = 587


# logging setting for gunicorn
LOGGING = {
    'version': 1,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(name)s.%(funcName)s:%(lineno)s- %(message)s',
            'datefmt' : "%d/%b/%Y %H:%M:%S"
        },
    },
    'disable_existing_logger': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'django': {
            # 'level': 'DEBUG',
            'handlers': ['console'],
        },
    },
    'root': {'level': 'INFO'}
}


ADMIN_TOOLS_MENU = 'config.admin.CustomMenu'
ADMIN_TOOLS_INDEX_DASHBOARD = 'config.admin.MyDashboard'


DEFAULT_FRONTEND_REDIRECT_URL = '/user-management/users'

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'  # added after django version upgrade from 2.2 to 4.0 to avoid warning and migrations

